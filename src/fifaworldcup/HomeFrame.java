/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fifaworldcup;

import com.mongodb.client.model.Filters;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.bson.Document;
import org.bson.conversions.Bson;

/**
 *
 * @author Utente
 */
public class HomeFrame extends javax.swing.JFrame {

    /**
     * Creates new form HomeJFrame
     */
    public HomeFrame() {
        initComponents();
        conn = new MongoConnection();
        fillCupsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        keywordTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox<>();
        tableScrollPane = new javax.swing.JScrollPane();
        matchesTable = new javax.swing.JTable();
        clearButton = new javax.swing.JButton();
        cupsTableButton = new javax.swing.JButton();
        advSearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FIFA World Search");
        setResizable(false);

        keywordTextField.setMargin(new java.awt.Insets(2, 6, 2, 2));

        searchButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchButton.setText("Search");
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setText("FIFA World Search");

        categoryComboBox.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Year", "Team", "Match", "Player", "Coach", "Country" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(30, 30, 30)
                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keywordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(193, 193, 193))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(keywordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        matchesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Country", "Winner", "Runners-up", "Third", "Fourth", "Goal scored", "Qualified teams", "Matches played"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        });
        matchesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        matchesTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        matchesTable.setIntercellSpacing(new java.awt.Dimension(15, 2));
        matchesTable.setMaximumSize(new java.awt.Dimension(100, 0));
        matchesTable.setMinimumSize(new java.awt.Dimension(25, 0));
        matchesTable.setName(""); // NOI18N
        matchesTable.setRowHeight(24);
        matchesTable.getTableHeader().setReorderingAllowed(false);
        matchesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matchesTableMouseClicked(evt);
            }
        });
        matchesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tableScrollPane.setViewportView(matchesTable);
        matchesTable.getColumnModel().getColumn(0).setMinWidth(50);
        for (int i = 1; i <= 8; i ++)
        matchesTable.getColumnModel().getColumn(i).setMinWidth(100);

        clearButton.setText("Clear table");
        clearButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearButtonMouseClicked(evt);
            }
        });

        cupsTableButton.setText("Return to cups table");
        cupsTableButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cupsTableButtonMouseClicked(evt);
            }
        });

        advSearchButton.setText("Advanced search");
        advSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tableScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(advSearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cupsTableButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cupsTableButton)
                    .addComponent(clearButton)
                    .addComponent(advSearchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void advSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advSearchButtonActionPerformed
        // TODO add your handling code here:
        AdvancedSearchFrame frame = new AdvancedSearchFrame();
        frame.setHomeFrame(this);
        frame.setVisible(true);
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdvancedSearchFrame frame = new AdvancedSearchFrame();
                frame.setHomeFrame(this);
                frame.setVisible(true);
            }
        });
        */
    }//GEN-LAST:event_advSearchButtonActionPerformed

    private void matchesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matchesTableMouseClicked
        // TODO add your handling code here:
        if (tableShowsMatches) {
            MatchFrame matchFrame = new MatchFrame();
            int selectedRow = matchesTable.getSelectedRow();
            String dateTime = (String) matchesTable.getValueAt(selectedRow, 1);
            String homeTeam = (String) matchesTable.getValueAt(selectedRow, 5);
            ArrayList<Bson> filters = new ArrayList<>();
            filters.add(Filters.eq("Datetime", dateTime));
            filters.add(Filters.eq("Home Team Name", homeTeam));
            Document match = conn.findAllMatch(filters).get(0);
            String matchID = match.getString("MatchID");
            String homeInitials = match.getString("Home Team Initials");
            String awayInitials = match.getString("Away Team Initials");
            ArrayList<Document> players = conn.seePlayersinMatch(matchID);
            matchFrame.fillPlayersTables(players, homeInitials, awayInitials);
            String year = (String) matchesTable.getValueAt(selectedRow, 0);
            matchFrame.setYear(year);
            matchFrame.setConnection(conn);
            matchFrame.setVisible(true);
        } else {
            int selectedColumn = matchesTable.getSelectedColumn();
            int selectedRow = matchesTable.getSelectedRow();
            String keyword = (String) matchesTable.getValueAt(selectedRow, selectedColumn);
            String columnName = matchesTable.getColumnName(selectedColumn);
            clearTable();
            setMatchesTable();
            if (columnName.equals("Year")) {
                searchMatches(columnName, keyword);
                categoryComboBox.setSelectedItem("Year");
            } else if (columnName.equals("Country")) {
                searchMatches(columnName, keyword);
                categoryComboBox.setSelectedItem("Country");
            } else if (columnName.equals("Winner") || columnName.equals("Runners-up") || columnName.equals("Third") || columnName.equals("Fourth")) {
                searchMatches("Team", keyword);
                categoryComboBox.setSelectedItem("Team");
            }
            keywordTextField.setText(keyword);
        }
    }//GEN-LAST:event_matchesTableMouseClicked

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        // TODO add your handling code here:
        String category = (String) categoryComboBox.getSelectedItem();
        String keyword = keywordTextField.getText();
        if (keyword != null && !keyword.isEmpty()) {
            setMatchesTable();
            searchMatches(category, keyword);
        }
    }//GEN-LAST:event_searchButtonMouseClicked

    private void cupsTableButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cupsTableButtonMouseClicked
        // TODO add your handling code here:
        if (tableShowsMatches) {
            setCupsTable();
            fillCupsTable();
        }
    }//GEN-LAST:event_cupsTableButtonMouseClicked

    private void clearButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearButtonMouseClicked
        // TODO add your handling code here:
        clearTable();
    }//GEN-LAST:event_clearButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrame().setVisible(true);
            }
        });
    }
    
    private void setMatchesTable() {
        if (matchesTable.getColumnCount() > 0 && tableShowsMatches)
            return;
        matchesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Date Time", "Stage", "Stadium", "City", "Home T. Name", "Home T. Goals", "Away T. Goals", "Away T. Name", "Win conditions", "Attendance", "Half-t. Home Goals", "Half-t. Away Goals", "Referee", "Assistant 1", "Assistant 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        });
        matchesTable.setColumnSelectionAllowed(false);
        matchesTable.setRowSelectionAllowed(true);
        tableShowsMatches = true;
        int columnCount = matchesTable.getColumnCount();
        matchesTable.getColumnModel().getColumn(0).setMinWidth(50);
        matchesTable.getColumnModel().getColumn(1).setMinWidth(150);
        matchesTable.getColumnModel().getColumn(2).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(3).setMinWidth(150);
        matchesTable.getColumnModel().getColumn(4).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(5).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(6).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(7).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(8).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(9).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(10).setMinWidth(100);
        matchesTable.getColumnModel().getColumn(11).setMinWidth(125);
        matchesTable.getColumnModel().getColumn(12).setMinWidth(125);
        matchesTable.getColumnModel().getColumn(13).setMinWidth(150);
        matchesTable.getColumnModel().getColumn(14).setMinWidth(150);
        matchesTable.getColumnModel().getColumn(15).setMinWidth(150);
    }
    
    private void setCupsTable() {
        if (!tableShowsMatches)
            return;
        matchesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Year", "Country", "Winner", "Runners-up", "Third", "Fourth", "Goal scored", "Qualified teams", "Matches played"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        });
        matchesTable.setColumnSelectionAllowed(true);
        matchesTable.setRowSelectionAllowed(true);
        tableShowsMatches = false;
        matchesTable.getColumnModel().getColumn(0).setMinWidth(50);
        for (int i = 1; i <= 8; i ++)
            matchesTable.getColumnModel().getColumn(i).setMinWidth(100);
    }
    
    private void searchMatches(String category, String keyword) {
        ArrayList<Document> results = new ArrayList<>();
        switch (category) {
            case "Team":
                results = conn.findTeam(keyword);
                break;
            case "Year":
                results = conn.findYear(keyword);
                break;
            case "Match":
                int index = keyword.indexOf(',');
                String teamA = keyword.substring(0, index).trim();
                String teamB = keyword.substring(index + 1).trim();
                results = conn.findMatch(teamA, teamB);
                break;
            case "Player":
                results = conn.findPlayerName(keyword);
                break;
            case "Coach":
                results = conn.findCoach(keyword);
                break;
            case "Country":
                results = conn.findCountry(keyword);
                break;
            default:
                break;
        }
        fillMatchesTable(results);
    }
    
    private void fillCupsTable() {
        ArrayList<Document> cups = conn.findCups();
        DefaultTableModel model = (DefaultTableModel) matchesTable.getModel();
        for (Document document : cups) {
            model.addRow(new Object[] {
                document.getString("Year"),
                document.getString("Country"),
                document.getString("Winner"),
                document.getString("Runners-Up"),
                document.getString("Third"),
                document.getString("Fourth"),
                document.getString("GoalsScored"),
                document.getString("QualifiedTeams"),
                document.getString("MatchesPlayed"),
                document.getString("Attendance")
            });
        }
        model.removeRow(cups.size() - 1);
    }
    
    public void advancedSearch(ArrayList<Bson> matchFilters, ArrayList<Bson> playerFilters, String country) {
        setMatchesTable();
        ArrayList<Document> results = new ArrayList();
        if (!matchFilters.isEmpty() && playerFilters.isEmpty() && !country.equals(""))
            results = conn.findAllMatch(matchFilters, country);
        else if (!matchFilters.isEmpty() && !playerFilters.isEmpty() && country.equals(""))
            results = conn.findMixedAttribute(playerFilters, matchFilters);
        else if (matchFilters.isEmpty() && !playerFilters.isEmpty() && country.equals(""))
            results = conn.findAllPlayer(playerFilters);
        else if (!matchFilters.isEmpty() && playerFilters.isEmpty() && country.equals(""))
            results = conn.findAllMatch(matchFilters);
        fillMatchesTable(results);
        categoryComboBox.setSelectedItem("Year");
        keywordTextField.setText("");
    }
    
    private void fillMatchesTable(ArrayList<Document> results) {
        setMatchesTable();
        clearTable();
        DefaultTableModel model = (DefaultTableModel) matchesTable.getModel();
        for (Document document : results) {
            model.addRow(new Object[] {
                document.getString("Year"),
                document.getString("Datetime"),
                document.getString("Stage"),
                document.getString("Stadium"),
                document.getString("City"),
                document.getString("Home Team Name"),
                document.getString("Home Team Goals"),
                document.getString("Away Team Goals"),
                document.getString("Away Team Name"),
                document.getString("Win conditions"),
                document.getDouble("Attendance"),
                document.getString("Half-time Home Goals"),
                document.getString("Half-time Away Goals"),
                document.getString("Referee"),
                document.getString("Assistant 1"),
                document.getString("Assistant 2")
            });
        }
        /*if (checkColumn(9))
            checkColumn(9);
        else
            checkColumn(10);*/
        int i = 0;
        while (i < matchesTable.getColumnCount())
            if (!checkColumn(i))
                i++;
    }
    
    private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) matchesTable.getModel();
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++)
            model.removeRow(0);
    }
    
    private boolean checkColumn(int n) {
        for (int i = 0; i < matchesTable.getRowCount(); i++) {
            Object value = matchesTable.getValueAt(i, n);
            if (value != null)
                return false;
        }
        TableColumnModel model = matchesTable.getColumnModel();
        matchesTable.removeColumn(model.getColumn(n));
        return true;
    }
    
    private final MongoConnection conn;
    private boolean tableShowsMatches;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton advSearchButton;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton cupsTableButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField keywordTextField;
    private javax.swing.JTable matchesTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JScrollPane tableScrollPane;
    // End of variables declaration//GEN-END:variables
}
